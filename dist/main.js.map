{"mappings":"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","sources":["src/index.js","src/modules/class_thing/class_thing.js","src/modules/class_property/class_property.js","src/modules/class_propertyValue/class_propertyValue.js","src/modules/class_metadata/class_metadata.js","src/modules/class_thing/helpers/fullRecord.js","src/modules/class_thing/helpers/recordHelpers.js","src/modules/class_thing/helpers/systemRecord.js","src/modules/class_thing/helpers/krakenCache.js","src/modules/class_thing/helpers/thingComparison.js","src/modules/class_thing/helpers/propertyManipulation.js","src/modules/class_thing/helpers/consoleHelpers.js","src/modules/class_thing/helpers/valueManipulation.js","src/modules/class_thing/helpers/itemListHelpers.js"],"sourcesContent":["\nimport { KrThing as KrThingRecord } from './modules/class_thing/class_thing.js';\nimport { KrProperty as KrPropertyRecord } from './modules/class_property/class_property.js';\nimport { KrPropertyValue as KrPropertyValueRecord } from './modules/class_propertyValue/class_propertyValue.js';\n\n\nexport var KrThing = KrThingRecord\nexport var KrProperty = KrPropertyRecord\nexport var KrPropertyValue = KrPropertyValueRecord\n\n\n\n","import { v4 as uuidv4 } from \"uuid\";\n\nimport { KrProperty } from \"../class_property/class_property.js\";\nimport { KrMetadata } from \"../class_metadata/class_metadata.js\";\n\nimport { fullRecord } from \"./helpers/fullRecord.js\";\n\nimport { systemRecord } from \"./helpers/systemRecord.js\";\nimport { thingComparison } from \"./helpers/thingComparison.js\";\nimport { propertyManipulation } from \"./helpers/propertyManipulation.js\";\nimport { recordHelpers } from \"./helpers/recordHelpers.js\";\nimport { consoleHelpers } from './helpers/consoleHelpers.js'\nimport { valueManipulation } from './helpers/valueManipulation.js'\nimport { itemListHelpers } from './helpers/itemListHelpers.js'\n\n\nlet MAX_DEPTH = 10;\n\nexport class KrThing {\n    /*\n\n    attributes:\n    - record_type:\n    - record_id: \n    - record: \n    - ref:            returns dict with @type and @id\n    - refID:          returns string type___id\n    - fullRecord:     returns native records from class objects (nested)\n    - refRecord:      returns record with only \n    - properties:     returns list of KrProperties\n    - json:           returns this.record as json\n    - _blockEvents:     prevents dispatch of events if true\n\n    Methods\n    - getProperty: \n    - setProperty:\n    - get (same as getProperty):\n    - set (same as setProperty):\n    - blockEvents:\n    - allowEvents: \n\n    */\n\n    constructor(record_type = null, record_id = null) {\n        this._properties = [];\n\n        this._callbacks = {};\n        this._blockEvents = false;\n\n        // metadata\n        this.metadata = new KrMetadata();\n\n        // if record_type is a dict, treat as record instead\n        if (record_type && record_type[\"@type\"])\n            this.setFullRecord(record_type);\n\n        //\n        if (record_type && !record_type[\"@type\"]) {\n            this.setProperty(\"@type\", record_type);\n        }\n        if (record_id) {\n            this.setProperty(\"@id\", record_id);\n        }\n\n        if (!this.record_id || this.record_id == null) {\n            record_id = String(uuidv4());\n        }\n    }\n\n    toJSON() {\n        return this.record;\n    }\n\n    toString() {\n        return JSON.stringify(this.record, null, 4);\n    }\n\n    // -----------------------------------------------------\n    //  events\n    // -----------------------------------------------------\n\n    addEventListener(eventType, callback) {\n        if (typeof callback !== \"function\") return;\n\n        if (!eventType || eventType == null) {\n            eventType == \"all\";\n        }\n        if (this._callbacks[eventType] === undefined) {\n            this._callbacks[eventType] = [];\n        }\n\n        this._callbacks[eventType].push(callback);\n    }\n\n    blockEvents() {\n        this._blockEvents = true;\n    }\n    allowEvents() {\n        this._blockEvents = false;\n    }\n\n    dispatchEvent(eventType, data) {\n        //if (this._callbacks[eventType] === undefined) return;\n\n        if (this._blockEvents == true) {\n            return;\n        }\n\n        const event = {\n            type: eventType,\n            target: this,\n            data: data,\n        };\n\n        if (this._callbacks[eventType] === undefined) {\n            this._callbacks[eventType] = [];\n        }\n\n        if (this._callbacks[\"all\"] === undefined) {\n            this._callbacks[\"all\"] = [];\n        }\n\n        this._callbacks[eventType].forEach((callback) => {\n            callback(event);\n        });\n\n        this._callbacks[\"all\"].forEach((callback) => {\n            callback(event);\n        });\n    }\n\n    // ----------------------------------------------------\n    // Attributes\n    // ----------------------------------------------------\n\n    get record_type() {\n        return this.getProperty(\"@type\").value;\n    }\n    set record_type(value) {\n        if (!value) {\n            return;\n        }\n        return this.setProperty(\"@type\", value);\n    }\n    get record_id() {\n        let record_id = this.getProperty(\"@id\").value;\n        if (!record_id || record_id == null) {\n            this.record_id = String(uuidv4());\n        }\n        return this.getProperty(\"@id\").value;\n    }\n    set record_id(value) {\n        if (!value) {\n            return;\n        }\n        return this.setProperty(\"@id\", value);\n    }\n    get ref() {\n        return { \"@type\": this.record_type, \"@id\": this.record_id };\n    }\n\n    set ref(value){\n        this.record_type = value['@type']\n        this.record_id = value['@id']\n    }\n\n    get recordRef(){\n        return this.ref\n    }\n\n    set recordRef(value){\n        this.ref = value\n    }\n    \n    get refID() {\n        return `${this.record_type}___${this.record_id}`;\n    }\n\n    \n\n    get properties() {\n        return propertyManipulation.getAll(this)\n    }\n\n    get things() {\n        return this.getThings();\n    }\n\n    getThings() {\n        return valueManipulation.getThings(this)\n    }\n\n    // -----------------------------------------------------\n    //  System attributes\n    // -----------------------------------------------------\n\n    get systemCreatedDate() {\n        return valueManipulation.getSystemCreatedDate(this)\n    }\n\n    get systemUpdatedDate() {\n        return valueManipulation.getSystemUpdatedDate(this)\n    }\n\n    // ----------------------------------------------------\n    // Records\n    // ----------------------------------------------------\n\n    get record() {\n        return this.getFullRecord();\n    }\n    set record(value) {\n        this.setFullRecord(value);\n    }\n    get fullRecord() {\n        return this.getFullRecord();\n    }\n    set fullRecord(value) {\n        this.setFullRecord(value);\n    }\n \n\n    getFullRecord(maxDepth = MAX_DEPTH, currentDepth = 0) {\n        return fullRecord.get(this, maxDepth, currentDepth);\n    }\n\n    setFullRecord(value) {\n        return fullRecord.set(this, value);\n    }\n\n\n   \n\n    // ----------------------------------------------------\n    // System records\n    // ----------------------------------------------------\n\n    get systemRecord() {\n        return this.getSystemRecord();\n    }\n    set systemRecord(value) {\n        this.setSystemRecord(value);\n    }\n    get rawRecord() {\n        return this.getSystemRecord(0);\n    }\n    set rawRecord(value) {\n        this.setSystemRecord(value);\n    }\n\n    getSystemRecord(maxDepth = MAX_DEPTH, currentDepth = 0) {\n        return systemRecord.get(this, maxDepth, currentDepth);\n    }\n\n    setSystemRecord(value) {\n        return systemRecord.set(this, value);\n    }\n\n    // ----------------------------------------------------\n    // Methods\n    // ----------------------------------------------------\n\n    getProperty(propertyID) {\n        return propertyManipulation.get(this, propertyID);\n    }\n\n    addProperty(propertyID, value, credibility, observationDate) {\n        return this._updateProperty(\n            propertyID,\n            value,\n            credibility,\n            observationDate,\n            \"addAction\",\n        );\n    }\n\n    deleteProperty(propertyID, value, credibility, observationDate) {\n        return this._updateProperty(\n            propertyID,\n            value,\n            credibility,\n            observationDate,\n            \"deleteAction\",\n        );\n    }\n\n    replaceProperty(\n        propertyID,\n        previousValue,\n        newValue,\n        credibility,\n        observationDate,\n    ) {\n        if (!newValue && newValue !== 0) {\n            newValue = previousValue;\n            previousValue = null;\n        }\n\n        if (\n            newValue &&\n            newValue != null &&\n            Array.isArray(newValue) &&\n            newValue.length > 0\n        ) {\n            this._updateProperty(\n                propertyID,\n                newValue[0],\n                credibility,\n                observationDate,\n                \"replaceAction\",\n                previousValue,\n            );\n            this._updateProperty(\n                propertyID,\n                newValue.slice(1),\n                credibility,\n                observationDate,\n                \"addAction\",\n                previousValue,\n            );\n\n            return;\n        }\n        return this._updateProperty(\n            propertyID,\n            newValue,\n            credibility,\n            observationDate,\n            \"replaceAction\",\n            previousValue,\n        );\n    }\n\n    setProperty(propertyID, value, credibility, observationDate) {\n        return this.replaceProperty(\n            propertyID,\n            undefined,\n            value,\n            credibility,\n            observationDate,\n        );\n    }\n\n    _updateProperty(\n        propertyID,\n        value,\n        credibility,\n        observationDate,\n        actionType,\n        previousValue,\n    ) {\n        return propertyManipulation.set(\n            this,\n            propertyID,\n            value,\n            credibility,\n            observationDate,\n            actionType,\n            previousValue,\n        );\n    }\n\n    get(propertyID) {\n        return this.getProperty(propertyID);\n    }\n    \n    set(propertyID, value) {\n        return this.setProperty(propertyID, value);\n    }\n\n    new(record_type, record_id) {\n        return new KrThing(record_type, record_id);\n    }\n\n    // -----------------------------------------------------\n    //  Query\n    // -----------------------------------------------------\n\n    findValue(value) {\n        // Returns the properties with given value\n        let properties = [];\n        for (let p of this._properties) {\n            if (p.containsValue(value)) {\n                properties.push(p.propertyID);\n            }\n        }\n        return properties;\n    }\n\n    // ----------------------------------------------------\n    // Dot notation\n    // ----------------------------------------------------\n\n    dotGet(path) {}\n\n    dotSet(path, value) {}\n\n    // ----------------------------------------------------\n    // Comparisons\n    // ----------------------------------------------------\n\n    lt(other) {\n        return thingComparison.lt(this, other);\n    }\n\n    gt(other) {\n        return thingComparison.gt(this, other);\n    }\n\n    eq(other) {\n        return thingComparison.eq(this, other);\n    }\n\n    merge(other) {\n        return thingComparison.merge(this, other);\n    }\n\n\n\n\n    // -----------------------------------------------------\n    //  ListItem specific attributes and methods   \n    // -----------------------------------------------------\n\n    get item(){\n        return this.getProperty('item').value\n    }\n\n    set item(value){\n        return this.setProperty('item', value)\n    }\n\n    get position(){\n        return this.getProperty('position').value\n    }\n\n    set position(value){\n        return this.setProperty('position', value)\n    }\n\n    get previousItem(){\n        return this.getProperty('previousItem').value\n    }\n\n    set previousItem(value){\n        return this.setProperty('previousItem', value)\n    }\n\n    get nextItem(){\n        return this.getProperty('nextItem').value\n    }\n\n    set nextItem(value){\n        return this.setProperty('nextItem', value)\n    }\n    \n    \n    // -----------------------------------------------------\n    //  ItemList specific attributes and methods  \n    // -----------------------------------------------------\n\n    get items(){\n        return itemListHelpers.getItems(this)\n    }\n\n    set items(value){\n        return itemListHelpers.setItems(this, value)\n    }\n\n    getItems(){\n        return itemListHelpers.getItems(this)\n    }\n\n    setItems(value){\n        return itemListHelpers.setItems(this, value)\n    }\n\n    get firstItem(){\n        return itemListHelpers.getFirstItem(this)\n    }\n\n    get lastItem(){\n        return itemListHelpers.getLastItem(this)\n    }\n\n    setItems(items){\n        return itemListHelpers.setItems(this, items)\n    }\n\n    add(item){\n        return itemListHelpers.pushItem(this, item)\n    }\n    \n    pushItem( item){\n        return itemListHelpers.pushItem(this, item)\n    }\n\n    reCalculatePosition(){\n        return itemListHelpers.reCalculatePosition(this)\n    }\n\n    remove(item){\n        return itemListHelpers.remove(this, item)\n    }\n\n    insertBefore(referenceItem, refItemtoInsert){\n        return itemListHelpers.insertBefore(this, referenceItem, refItemtoInsert)\n    }\n\n    insertAfter(referenceItem, refItemtoInsert){\n        return itemListHelpers.insertAfter(this, referenceItem, refItemtoInsert)\n    }\n\n    getItem(ref){\n        return itemListHelpers.getItem(this, ref)\n    }\n\n    // -----------------------------------------------------\n    //  Query specific attributes and methods \n    // -----------------------------------------------------\n\n    \n    get limit(){\n        return this._limit\n    }    \n\n    set limit(value){\n        this._limit = value\n    } \n\n    get offset(){\n        return this._offset\n    }    \n\n    set offset(value){\n        this._offset = value\n    } \n\n    get orderBy(){\n        return this._orderBy\n    }    \n\n    set orderBy(value){\n        this._orderBy = value\n    } \n\n    get orderDirection(){\n        return this._orderDirection\n    }    \n\n    set orderDirection(value){\n        this._orderDirection = value\n    } \n\n    get query(){\n        return this._query\n    }    \n\n    set query(value){\n        this._query = value\n    } \n\n\n    get basePath(){\n        return this._basePath\n    }    \n\n    set basePath(value){\n        this._basePath = value\n    } \n\n    get params(){\n\n        let params = {}\n        if(!this._params || this._params == null) {\n            return {}\n        } else {\n            params = this._params\n        }\n\n        let keys = ['limit', 'offset', 'orderBy', 'orderDirection']\n        for(let k of keys){\n            let v = this[k]\n            if(v && v != null){\n                params[k] = v\n            }\n        }        \n        return params\n    }    \n\n    set params(value){\n        this._params = value\n    } \n\n\n\n    \n    \n    // -----------------------------------------------------\n    //  Comment\n    // -----------------------------------------------------\n\n    print() {\n        return consoleHelpers.print()\n    }\n\n    printScreen() {\n        return consoleHelpers.printScreen()\n    }\n\n    printScreenAll() {\n        return consoleHelpers.printScreenAll()\n    }\n}\n","import { KrPropertyValue } from \"../class_propertyValue/class_propertyValue.js\";\nimport { KrMetadata } from \"../class_metadata/class_metadata.js\";\n\nexport class KrProperty {\n    /*\n\n    attributes:\n    - propertyID:     string\n    - propertyValue:         get best KrPropertyValue object or sets a value\n    - propertyValues:        get best KrPropertyValue object for each values\n    - propertyValuesAll:     get all KrPropertyValue\n    - value:                 return best value\n    - values:                return values\n    - record:        get value as non Kr object  \n\n    methods:\n    - gt: greater than a.gt(b) a is greater than b\n    - lt: less than a.lt(b) a is less than b\n    - setValues:     Sets several values\n    - setValue:      Sets a single value and returns a KrPropertyValue object\n    - get_max:       Returns best KrPropertyValue object\n    \n    */\n\n    constructor(propertyID = null) {\n        this._propertyID = propertyID;\n        this._propertyValues = [];\n        this._propertyValuesNetCache = null; \n        this._propertyValuesNetCacheOld = null; \n        this._propertyValuesCache = null; \n        this._propertyValuesCacheOld = null; \n\n\n        \n        this.metadata = new KrMetadata();\n    }\n    // Base\n    get propertyID() {\n        return this._propertyID;\n    }\n    set propertyID(record) {\n        this._propertyID = ensureNotArray(value);\n    }\n\n    gt(other) {\n        if (this.propertyID == other.propertyID) {\n            return false;\n        }\n        if (this.propertyID == \"@type\") {\n            return false;\n        }\n        if (other.propertyID == \"@type\") {\n            return true;\n        }\n        if (this.propertyID == \"@id\") {\n            return false;\n        }\n        if (other.propertyID == \"@id\") {\n            return true;\n        }\n\n        if (this.propertyID > other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n    lt(other) {\n        if (this.propertyID == other.propertyID) {\n            return false;\n        }\n        if (this.propertyID == \"@type\") {\n            return true;\n        }\n        if (other.propertyID == \"@type\") {\n            return false;\n        }\n        if (this.propertyID == \"@id\") {\n            return true;\n        }\n        if (other.propertyID == \"@id\") {\n            return false;\n        }\n\n        if (this.propertyID < other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n\n    eq(other) {\n        if (this.propertyID && this.propertyID == other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n\n    getPropertyValueById(propertyValueID){\n\n        if(!propertyValueID || propertyValueID == null) { return }\n\n        for(let pv of this._propertyValues){\n\n            if (pv.record_id == propertyValueID){\n                return pv\n            }\n            \n        }\n        return null\n        \n    }\n\n\n    contains(newPV){\n        // Return true if already contains same propertyValue\n\n\n        if(!newPV || newPV == null ){ return }\n        \n        for(let pv of this._propertyValues){\n            if(pv.eq(newPV)){ return true}\n        }\n        return false\n        \n    }\n\n    \n    merge(other){\n        // merge other property with this property\n\n        let needCompileFlag = false\n        \n        if(!other || other == null){ return }\n     \n        for(let pv of other._propertyValues){\n            if(this.contains(pv) == false){\n                this._propertyValues.push(other)\n                needCompileFlag = true\n            }\n            \n        }\n\n        if(needCompileFlag == true){\n            this.compilePropertyValues(true)\n        }\n        \n    }\n\n    //\n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n    \n    getFullRecord(maxDepth, currentDepth) {\n        return this.propertyValuesNet.map((x) => x.getFullRecord(maxDepth, currentDepth) )\n    }\n\n    getRefRecord(maxDepth, currentDepth){\n        return this.propertyValuesNet.map((x) => x.getRefRecord(maxDepth, currentDepth) )\n    }\n\n    getBestRecord(maxDepth, currentDepth){\n\n        let p = this.propertyValue\n        if(p && p != null){\n            \n            return [p.getBestRecord(maxDepth, currentDepth)]\n        }\n        return []\n    }\n\n    getDetailRecord(maxDepth, currentDepth){\n        return this.propertyValuesNet.map((x) => x.getDetailRecord(maxDepth, currentDepth) )\n    }\n    \n    \n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n\n\n    getSystemRecord(maxDepth, currentDepth){\n        \n        return this._propertyValues.map((x) => x.getSystemRecord(maxDepth, currentDepth) )\n    }\n\n    setSystemRecord(value){\n\n        this._propertyValues=[];\n        var values = ensureArray(value);\n        for(let value of values){\n            var propertyValue = new KrPropertyValue();\n            propertyValue.setSystemRecord(value)\n            this._propertyValues.push(propertyValue);\n        };\n    }\n    \n\n\n    // -----------------------------------------------------\n    //  System attributes \n    // -----------------------------------------------------\n\n    get systemCreatedDate(){\n\n        let resultDate = null\n        for(let pv of this._propertyValues){\n            let itemDate = pv.systemCreatedDate\n            if(itemDate && (resultDate == null || itemDate < resultDate )){\n                resultDate = itemDate\n            }\n        }\n        return resultDate\n        \n    }\n\n    get systemUpdatedDate(){\n\n        let resultDate = null\n        for(let pv of this._propertyValues){\n            let itemDate = pv.systemCreatedDate\n            if(itemDate && (resultDate == null || itemDate > resultDate )){\n                resultDate = itemDate\n            }\n        }\n        return resultDate\n    }\n    \n    // ----------------------------------------------------\n    // PropertyValues \n    // ----------------------------------------------------\n\n    get propertyValue() {\n        // return best property value object\n        if(this.propertyValues && this.propertyValues.length > 0){\n            return this.propertyValues[0];\n        }\n        return null\n    }\n\n    get propertyValues(){\n        // returns best pv for each different value\n\n        // Serve from cache\n        let cache = this._propertyValuesCache\n        let cacheOld = this._propertyValuesCacheOld\n        if(cache && cache != null && cache.length > 0){\n            if(cache == cacheOld) { return cache }\n        } \n\n        var results = [];\n        var pvs = this.propertyValuesNet\n        const values = [...new Set(pvs.map((x) => x.value ))];\n        values.forEach((value) => {\n            const filteredPV = pvs.filter((item) => item.value == value);\n            let maxPV = filteredPV.reduce((maxItem, item) => maxItem.gt(item) ? maxItem : item);\n            results.push(maxPV)\n        })\n\n        function compare(a, b) {\n            if(a.gt(b)){return -1};\n            if(a.lt(b)){return 1};\n            return 0;\n        };\n\n        results.sort(compare);\n\n        // Refresh cache\n        this._propertyValuesCache = results\n        this._propertyValuesCacheOld = results\n        \n        return results;\n    }\n\n    get propertyValuesNet(){\n\n        \n        this.compilePropertyValues()\n\n        return this._propertyValuesNetCache\n        \n\n    }\n\n\n    compilePropertyValues(force=false){\n        \n        let pv = this._propertyValues\n\n        let cache = this._propertyValuesNetCache\n        let cacheOld = this._propertyValuesNetCacheOld\n\n        if(force == false){\n            if(cache && cache != null && cache.length > 0){\n                pv = cache\n                if(cache == cacheOld) { return cache } \n            } \n        }\n        \n        let results = [];\n\n        // Process additions        \n        results = results.concat(pv.filter((item) => item.record_type == 'addAction'));\n        results = results.concat(pv.filter((item) => item.record_type == 'replaceAction'));\n\n        // Process deletions and replacements\n        pv.filter((item) => item.record_type == 'replaceAction').forEach((filteredItem) => {\n            results = results.filter((result) => !(result.lt(filteredItem) && (filteredItem.replacee == null || filteredItem.replacee === undefined ||  filteredItem.replacee == result.value )));\n        });\n\n        pv.filter((item) => item.record_type == 'deleteAction').forEach((filteredItem) => {\n            results = results.filter((result) => !(result.lt(filteredItem) && result.value == filteredItem.value));\n        });\n\n        function compare(a, b) {\n            if(a.gt(b)){return -1};\n            if(a.lt(b)){return 1};\n            return 0;\n        };\n\n        results.sort(compare);\n        this._propertyValuesNetCache = []\n        this._propertyValuesNetCache = this._propertyValuesNetCache.concat(results)\n        this._propertyValuesNetCacheOld = []\n        this._propertyValuesNetCacheOld = this._propertyValuesNetCacheOld.concat(results)\n        this._propertyValuesCache = null\n\n\n        // Disable validity\n        for(let pv of this._propertyValues){\n            pv.valid = false\n        }\n\n        // Reenable validity \n        for(let pv of this._propertyValuesNetCache){\n            pv.valid = true\n        }\n    }\n    \n    \n    get propertyValuesAll() {\n        // return in reverse order\n        \n        return this.propertyValuesNet;\n    }\n\n    // ----------------------------------------------------\n    // Values \n    // ----------------------------------------------------\n\n    get value() {\n        // Return value element of best propertyValue object\n        if (this.propertyValue){\n            return this.propertyValue.value;\n        }\n        return null;\n    }\n\n    set value(value) {\n        return this.setValues(value);\n    }\n    \n    get values() {\n        // Return value elements of all propertyValue object in order\n        return this.propertyValues.map((x) => x.value );\n    }\n\n    setValues(value, metadataRecord, actionType) {\n        let results = [];\n        let values = ensureArray(value);\n        for (let i = 0; i < values.length; i++) {\n            results.push(this.setValue(values[i], metadataRecord, actionType));\n        }\n        return results;\n    }\n\n    setValue(value, metadataRecord, actionType) {\n        let newValueObject = value;\n\n\n        // Check if date\n        let d = convertToDate(newValueObject)\n        if(d && d != null){\n            newValueObject = d\n        }\n        \n        if (!(newValueObject instanceof KrPropertyValue)) {\n            newValueObject = new KrPropertyValue(this.propertyID, value, actionType);\n        }\n        \n        newValueObject.metadata.inheritMetadata(metadataRecord);\n        this._propertyValues.push(newValueObject);\n        newValueObject.metadata.position = this._propertyValues.length;\n\n\n        if(this.contains(newValueObject) == true){ return }\n\n        \n        // Add to cache\n        if(this._propertyValuesNetCache && this._propertyValuesNetCache != null){\n            this._propertyValuesNetCache.push(newValueObject)\n        }\n\n        // Reset cache\n        this._propertyValuesCache = null\n        this._propertyValuesCacheOld = null\n        \n        return newValueObject;\n    }\n\n    \n    printScreen(suffix=''){\n\n        var v = this.value;\n        if (this.value && this.value.record_type) {\n            v = this.value.record_type + \"/\" + this.value.record_id;\n        };\n\n        console.log(suffix, \" - \", this.propertyID, \": \", v);\n\n       \n        this.propertyValuesNet.map((propertyValue) => {\n\n            propertyValue.printScreen(suffix + '    ');\n\n        });\n    }\n    printScreenAll(suffix=''){\n\n        var v = this.value;\n        if (this.value && this.value.record_type) {\n            v = this.value.record_type + \"/\" + this.value.record_id;\n        };\n\n        console.log(suffix, \" - \", this.propertyID, \": \", v);\n\n        console.log(suffix, \"       Net\");\n        this.propertyValuesNet.map((propertyValue) => {\n\n            propertyValue.printScreen(suffix + '        ');\n\n        });\n        console.log(suffix, \"       Raw\");\n        this.propertyValuesAll.map((propertyValue) => {\n\n            propertyValue.printScreen(suffix + '        ');\n\n        });\n    }\n\n    // -----------------------------------------------------\n    //  Query \n    // -----------------------------------------------------\n\n    containsValue(value){\n        // Return true if value is part of values\n\n        if(value.record_type){\n            value = value.ref\n        }\n\n        if(value['@type']){\n            value = {\"@type\": value?.[\"@type\"], \"@id\": value?.[\"@id\"]}\n        }\n        \n        for(let pv of this.propertyValues){\n            let value0 = pv.value\n            if(value0.record_type){\n                value0 = value0.ref\n            }\n\n            if(value0['@type']){\n                value0 = {\"@type\": value0?.[\"@type\"], \"@id\": value0?.[\"@id\"]}\n            }\n\n            if(JSON.stringify(value)==JSON.stringify(value0)){ \n                return true \n            }\n        }\n        return false   \n    }\n}\n\n\nfunction ensureNotArray(value) {\n    let new_value = ensureArray(value);\n    if (new_value.length > 0) {\n        return new_value[0];\n    } else {\n        return null;\n    }\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n\n\n\n\n\n\nfunction convertToDate(value) {\n    if (value instanceof Date && !isNaN(value)) {\n        return value;\n    }\n\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n        return date;\n    }\n\n    return null;\n}","import { v4 as uuidv4 } from 'uuid';\n\nimport { KrMetadata } from '../class_metadata/class_metadata.js';\n\nexport class KrPropertyValue {\n    /*\n\n    attributes:\n    - proeprtyID:\n    - value: \n    - c: \n    - d:\n\n    */\n    constructor(propertyID, value, actionType=\"replaceAction\", previousValue) {\n\n\n        \n        this._record = {\n            \"@type\": actionType,\n            \"@id\": String(uuidv4()),\n            \"object\": {\n                \"@type\": \"propertyValue\",\n                propertyID: propertyID,\n                value: value,\n            },\n            actionStatus: 'completedActionStatus',\n            replacee: previousValue,\n            replacer: value,\n            valid: true\n        };\n\n        this.metadata = new KrMetadata();\n    \n        }\n\n    // ----------------------------------------------------\n    // Attributes - action\n    // ----------------------------------------------------\n\n    get record_type(){\n        return this._record[\"@type\"];\n    }\n    set record_type(value){\n        this._record[\"@type\"] = value;\n    }\n    get record_id(){\n        return this._record[\"@id\"];\n    }\n    set record_id(value){\n        this._record[\"@id\"] = value;\n    }\n    get object(){\n        return this._record.object;\n    }\n    set object(value){\n        this._record.object =value;\n    }\n    get replacer(){\n        return this._record.replacer;\n    }\n    set replacer(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n        }\n\n    get valid(){\n        return this._record.valid;\n    }\n    \n    set valid(value){\n        this._record.valid = value\n        }\n\n    \n    get record(){\n\n        let record = this._record\n        \n        \n    }\n    \n\n    \n    // ----------------------------------------------------\n    // Attributes - object\n    // ----------------------------------------------------\n    \n    get propertyID(){\n        return this._record.object.propertyID;\n    }\n    set propertyID(value){\n        this._record.object.object.propertyID = value;\n    }\n    get value(){\n        return this._record.object.value;\n    }\n    set value(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n        }\n\n    // ----------------------------------------------------\n    // Attributes - metadata\n    // ----------------------------------------------------\n\n    get t(){\n        return this._record.t;\n    }\n    set t(value){\n         this._record.t = value;\n    }\n    get value(){\n        return this._record.object.value;\n    }\n    set value(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n    }\n    get agent(){\n        return this.metadata.agent;\n    }\n    set agent(value){\n        this.metadata.agent = value;\n    }\n    get instrument(){\n        return this.metadata.instrument;\n    }\n    set instrument(value){\n        this.metadata.instrument = value;\n    }\n    get credibility(){\n        this.metadata.credibility;\n    }\n    set credibility(value){\n        this.metadata.credibility = value;\n    }\n    get observationDate(){\n        return this.metadata.observationDate;\n    }\n    set observationDate(value){\n        this.metadata.observationDate = value;\n    }\n    get c(){\n        return this.metadata.credibility;\n    }\n    set c(value){\n        this.metadata.credibility = value;\n    }\n    get d(){\n        return this.metadata.observationDate;\n    }\n    set d(value){\n        this.metadata.observationDate = value;\n    }\n\n    get systemCreatedDate(){\n        return this.metadata.createdDate\n    }\n\n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n    \n    getFullRecord(maxDepth, currentDepth){\n        \n        if (this.value && this.value?.record_type ){ \n\n            if(['previousItem', 'nextItem'].includes(this.propertyID) ){\n                return this?.value?.ref\n            } else {\n                return this.value.getFullRecord(maxDepth, currentDepth)  \n            }\n        }\n        return this.value;\n    }\n\n    getRefRecord(maxDepth, currentDepth){\n\n        let record = JSON.parse(JSON.stringify(this._record));\n        record.metadata = this.metadata.getRefRecord(maxDepth, currentDepth);\n\n        if (this.value && this.value.record_type){\n            record['value'] = this.value.ref;\n        };\n        return record;        \n    }\n\n    getBestRecord(maxDepth, currentDepth){\n\n        let value = this.value;\n        if (this.value && this.value.record_type){\n            value = this.value.getBestRecord(maxDepth, currentDepth);\n        };\n        return value;        \n    }\n\n\n    getDetailRecord(maxDepth, currentDepth){\n        let record = {}\n        record['@type'] = this.record_type\n        record['@id'] = this.record_id\n        record['actionStatus'] = this._record.actionStatus\n        record['object'] = {}\n        record.object['@type'] = this._record.object['@type']\n        record.object['propertyID'] = this._record.object['propertyID']\n        record.object['value'] =  null\n\n        record.metadata = this.metadata.getSystemRecord();\n\n\n        if(['previousItem', 'nextItem'].includes(this.propertyID) ){\n            return this?.value?.ref || null\n        } \n\n\n        if (this.value && this.value.record_type ){\n            record.object['value'] = this.value.getDetailRecord(maxDepth, currentDepth);\n        } else {\n            record.object['value'] = this.value\n        }\n        return record;        \n    }\n    \n\n    // ----------------------------------------------------\n    // Raw records \n    // ----------------------------------------------------\n\n    getSystemRecord(maxDepth, currentDepth){\n\n        let record = {}\n        record['@type'] = this.record_type\n        record['@id'] = this.record_id\n        record['actionStatus'] = this._record?.actionStatus\n        record['valid'] = this._record?.valid\n        record['object'] = {}\n        record.object['@type'] = this._record?.object?.['@type']\n        record.object['propertyID'] = this._record?.object?.['propertyID']\n        record.object['value'] =  null\n        \n        record.metadata = this.metadata.getSystemRecord(maxDepth, currentDepth);\n\n        if(['previousItem', 'nextItem'].includes(this.propertyID) ){\n            record.object['value'] = this?.value?.ref\n        } else if (this.value && this.value.record_type ){\n            record.object['value'] = this.value.getSystemRecord(maxDepth, currentDepth);\n        } else {\n            record.object['value'] = this.value\n        }\n        return record;\n    }\n\n    setSystemRecord(value){\n\n        if(!value || value == null){ return }\n        \n        this.metadata.setSystemRecord(value?.metadata);\n        delete value.metadata;\n        this._record = JSON.parse(JSON.stringify(value));\n        this._record = value;\n    }\n\n    \n    // ----------------------------------------------------\n    // Methods \n    // ----------------------------------------------------\n\n    setValue(value, metadataRecord){\n        this.value = value;\n        this.metadata.inheritMetadata(metadataRecord);\n    }\n\n    equal(other){\n        return this.eq(other);\n    }\n    \n    eq(other){\n        // returns true if equal\n        \n        if (this.value != other.value){ return false }\n        if (this.metadata.eq(other.metadata) == false ){ return false }\n        \n        return true\n       \n    }\n    \n    gt(other){\n        return this.metadata.gt(other.metadata);\n    };\n    \n    lt(other){\n        return this.metadata.lt(other.metadata);\n    };\n\n    printScreen(suffix = ''){\n\n        var v = this.value;\n        if (this.value && this.value.record_type) {\n            v = this.value.record_type + \"/\" + this.value.record_id;\n        };\n        var t_string = this.record_type.replace('Action', '').padEnd(10);\n        var c_string = String(this.metadata.c || 0).padStart(5);\n        var p_string = String(this.metadata.position).padStart(5);\n        var d_string = String(this.metadata.createdDate.toLocaleTimeString()).padStart(9);\n        \n        \n        console.log(suffix, \" - \", c_string, p_string, t_string, d_string, v);\n        \n    }\n\n\n    // -----------------------------------------------------\n    //  HTML values \n    // -----------------------------------------------------\n\n\n    get valueHTML(){\n\n        if (this.value.record_type){\n\n            \n        }\n        \n    }\n\n    \n};\n\n\n\nfunction ensureNotArray(value) {\n    let new_value = ensureArray(value);\n    if (new_value.length > 0) {\n        return new_value[0];\n    } else {\n        return null;\n    }\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n","\n\n\nexport class KrMetadata {\n    /* Contains metadata to qualify a value\n\n    attributes:\n    - credibility or c:    \n    - observationDate or d: \n    - record:         Returns all metadata in a dict\n    - object:         The original source of the data\n    - Instrument:     What brought the data over\n    - validFrom\n    - validThrough\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n    - isValid    Returns true if date between validfrom validthrough\n    \n\n    */\n\n    \n    constructor(record) {\n        this._record = {};\n        \n        if(!this._record.createdDate || this._record.createdDate == null){\n            this._record.createdDate = new Date();\n        }\n        \n    }\n\n    get record(){\n        return this._record;\n    }\n\n    getFullRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    setFullRecord(value){\n        this._record = JSON.parse(JSON.stringify(value));\n    }\n\n    getRefRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    getSystemRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    setSystemRecord(value){\n        if(!value || value == null) { return }\n        this._record = JSON.parse(JSON.stringify(value));\n    }\n\n    inheritMetadata(metadataRecord){\n\n       \n        let currentPosition = this.position;\n        this.record = metadataRecord;\n        this.position = currentPosition;\n        \n        \n    }\n    \n    set record(value){\n        if(!value){return;};\n        let tempCreatedDate = this.createdDate\n        this._record = JSON.parse(JSON.stringify(value));\n        if(!this.createdDate || this.createdDate == null){\n            this.createdDate = tempCreatedDate\n        }\n    }\n    \n    get credibility(){\n        return this._record.credibility;\n    }\n\n    set credibility(value){\n        this._record.credibility = value;\n    }\n    get c(){\n        return this.credibility;\n    }\n\n    set c(value){\n        this.credibility = value;\n    }\n\n    get createdDate(){\n\n        let createdDate = this._record?.createdDate\n\n        if(createdDate instanceof String){\n            createdDate =  new Date(createdDate)\n        }\n        \n        return createdDate\n        \n    }\n\n    set createdDate(value){\n\n        \n        if(value instanceof Date){\n            this._record.createdDate = value\n        } else {\n            try{\n                this._record.createdDate = new Date(value)\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    get position(){\n        return this._record.position;\n    }\n\n    set position(value){\n        this._record.position = value;\n    }\n    \n    get observationDate(){\n        return new Date(JSON.parse(this._record.observationDate || null));\n    }\n\n    set observationDate(value){\n        if(value && value instanceof Date){\n            this._record.observationDate = JSON.stringify(value);\n        };\n    }\n    get d(){\n        return this.observationDate;\n    }\n\n    set d(value){\n        this.observationDate = value;\n    }\n\n    get validFrom(){\n        return this._record.validFrom;\n    }\n    set validFrom(value){\n        this._record.validFrom = value;\n    }\n\n    get validThrough(){\n        return this._record.validThrough;\n    }\n    set validThrough(value){\n        this._record.validThrough = value;\n    }\n\n    get object(){\n        return this._record.object;\n    }\n    set object(value){\n        this._record.object = value;\n    }\n\n\n    eq(other){\n        return this.equal(other)\n    }\n    \n    equal(other){\n        // returns true if data comes from same object\n        if (this.object != other.object){ return false }\n        if (this.instrument != other.instrument){ return false }\n        if (this.credibility != other.credibility){ return false }\n        if ( this.observationDate != other.observationDate){ return false };\n        return true;\n    }\n\n\n    isValid(comparisonDate=null){\n        // Returns true if value is within velidFrom, validThrough. Uses today's date if not provided\n        if(comparisonDate==null){\n            comparisonDate = new Date();\n        }\n\n        if (this.validFrom && comparisonDate < this.validFrom)  { return False };\n        if (this.validThrough && comparisonDate >= this.validThrough)  { return False }\n        return True\n    }\n    \n    gt(other, comparisonDate){\n\n        \n        if (!this.credibility && other.credibility) { return false};\n        if (this.credibility && !other.credibility) { return true};\n\n        if ( this.credibility > other.credibility){ return true };\n        if ( this.credibility < other.credibility){ return false };\n\n\n        if (!this.observationDate && other.observationDate) { return false};\n        if (this.observationDate && !other.observationDate) { return true};\n\n        if ( this.observationDate > other.observationDate){ return true };\n        if ( this.observationDate < other.observationDate){ return false };\n\n        if (!this.createdDate && other.createdDate) { return false};\n        if (this.createdDate && !other.createdDate) { return true};\n\n        if ( this.createdDate > other.createdDate){ return true };\n        if ( this.createdDate < other.createdDate){ return false };\n\n        if (!this.position && other.position) { return false};\n        if (this.position && !other.position) { return true};\n\n        if ( this.position > other.position){ return true };\n        if ( this.position < other.position){ return false };\n        \n        return false;\n    };\n\n    lt(other){\n\n        if (!this.credibility && other.credibility) { return true};\n        if (this.credibility && !other.credibility) { return false};\n        \n        if ( this.credibility < other.credibility){ return true };\n        if ( this.credibility > other.credibility){ return false };\n\n        \n        if (!this.observationDate && other.observationDate) { return true};\n        if (this.observationDate && !other.observationDate) { return false};\n\n        if ( this.observationDate < other.observationDate){ return true };\n        if ( this.observationDate > other.observationDate){ return false };\n        \n\n        if (!this.createdDate && other.createdDate) { return true};\n        if (this.createdDate && !other.createdDate) { return false};\n\n        if ( this.createdDate < other.createdDate){ return true };\n        if ( this.createdDate > other.createdDate){ return false };\n\n        if (!this.position && other.position) { return true};\n        if (this.position && !other.position) { return false};\n\n        if ( this.position < other.position){ return true };\n        if ( this.position > other.position){ return false };\n        \n        return false;\n    };\n\n    \n}","\nimport { KrProperty } from \"../../class_property/class_property.js\";\n\nimport { recordHelpers } from './recordHelpers.js'\n\nlet MAX_DEPTH = 10;\n\n\nexport const fullRecord = {\n\n    get: getFullRecord,\n    set: setFullRecord\n    \n}\n\nfunction getFullRecord(thisThing, maxDepth=MAX_DEPTH, currentDepth=0) {\n\n    if (!maxDepth || maxDepth == null) {\n        maxDepth = MAX_DEPTH;\n    }\n\n    if (currentDepth >= maxDepth) {\n        return thisThing.ref;\n    }\n\n    let record = {};\n    let properties = thisThing.properties;\n    for (let p of properties) {\n        record[p.propertyID] = p.getFullRecord(maxDepth, currentDepth + 1);\n    }\n    record[\"@type\"] = thisThing.record_type;\n    record[\"@id\"] = thisThing.record_id;\n\n    record = JSON.parse(JSON.stringify(record));\n    record = recordHelpers.simplify(record);\n    return record;\n}\n\nfunction setFullRecord(thisThing, value) {\n\n    if(!value || value == null){ return }\n    \n    thisThing._properties = [];\n    Object.keys(value).forEach((key) => {\n        thisThing.replaceProperty(key, null, value[key]);\n    });\n}\n\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}","\n\nexport const recordHelpers = {\n    ensureNotArray:ensureNotArray,\n    ensureArray: ensureArray,\n    simplify: simplify\n}\n\nfunction ensureNotArray(value) {\n    let new_value = ensureArray(value);\n    if (new_value.length > 0) {\n        return new_value[0];\n    } else {\n        return null;\n    }\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n\nfunction simplify(data) {\n    // Remove arrays of 1\n    //return data\n\n    if (Array.isArray(data)) {\n        // If the array has exactly one element, return that element\n        if (data.length === 1) {\n            return simplify(data[0]);\n        } else {\n            // Otherwise, process each element in the array\n            return data.map(simplify);\n        }\n    } else if (data !== null && typeof data === \"object\") {\n        // If the data is an object, process each key\n        const newData = {};\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                newData[key] = simplify(data[key]);\n            }\n        }\n        return newData;\n    } else {\n        // If the data is neither an array nor an object, return it as is\n        return data;\n    }\n}","\nimport { KrProperty } from \"../../class_property/class_property.js\";\n\nimport { KrCache } from './krakenCache.js'\n\n\nlet MAX_DEPTH = 10;\n\n\nexport const systemRecord = {\n\n    get: getSystemRecord,\n    set: setSystemRecord\n    \n}\n\nfunction getSystemRecord(thing, maxDepth=MAX_DEPTH, currentDepth=0) {\n\n    if(!maxDepth || maxDepth == null) { maxDepth = MAX_DEPTH }\n\n    if (currentDepth >= maxDepth) {\n        return thing.ref;\n    }\n\n    let record = {};\n    record[\"@type\"] = thing.record_type;\n    record[\"@id\"] = thing.record_id;\n    record.propertyValues = []\n    record.summary = thing.getFullRecord(1)\n\n    let pvs = []\n    for (let p of thing.properties) {\n            pvs = pvs.concat(p.getSystemRecord(maxDepth, currentDepth + 1));\n    }\n    record.propertyValues = pvs\n\n    //record.propertyValues.filter(x => x && x != null)\n\n    return record;\n}\n\n\nfunction setSystemRecord(thing, value, cache) {\n    // Load data into object\n\n    if(!cache || cache == null){\n        cache = new KrCache()\n        \n    }\n\n    \n    \n    // Convert from string if one\n    if(typeof value === 'string' || value instanceof String){\n\n        try{\n            value = JSON.parse(value)\n        } catch {\n            return\n        }\n    } \n\n    // Check if valid format\n    if (!value || (!value.propertyValues && !value.properties ) ) {\n        return;\n    }\n\n    // Reset current properties\n    thing._properties = [];\n\n\n    // Convert from old format to new\n    if(value.properties && value.properties != null ){\n        value.propertyValues = []\n        for(let k of Object.keys(value.properties)){\n            let pvs = value.properties[k]\n            pvs = ensureArray(pvs)\n            value.propertyValues = value.propertyValues.concat(pvs)\n        }            \n        value.propertyValues = value.propertyValues.filter((item) => item && item != null);\n    }\n\n\n\n    // Set pvRecords\n\n    if(!value.propertyValues || value.propertyValues == null){ return }\n\n    let pvRecords = ensureArray(value.propertyValues)\n\n    if(pvRecords.length == 0 ){ return }\n\n    // convert sub things to KrThing\n    let counter = 0\n    for(let pvRecord of pvRecords){\n        if(!pvRecord || pvRecord == null) { continue }\n        let value = pvRecord?.object?.value\n        if(!value || value == null) { continue }\n        if (value[\"@type\"] && value[\"@type\"] != null) {\n            var t = thing.new(value?.[\"@type\"],value?.[\"@id\"]);\n            t.setSystemRecord(value, cache);\n\n            // Store and retrieve to cache to avoid duplicate things\n            cache.set(t)\n            t = cache.get(t.record_type, t.record_id)\n\n            pvRecord.object.value = t;\n            counter += 1\n        }\n    }\n    \n\n    // Group pvRecords by propertyID\n    let propertyIDs = [...new Set(pvRecords.map((x) => x.object.propertyID ))];\n\n    for(let propertyID of propertyIDs){\n\n        let subPropertyValues = pvRecords.filter((item) => item.object.propertyID == propertyID);            \n        var property = new KrProperty(propertyID);\n        property.setSystemRecord(subPropertyValues);\n        thing._properties.push(property);\n\n    }\n\n    \n\n}\n\n\n\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}","\n\nexport class KrCache {\n    /**\n     * Cache to store things\n     */\n\n\n    constructor(maxTime=null) {\n\n        this._db = {}\n        this._maxTime = maxTime\n    }\n\n    get(record_type, record_id){\n\n        if(!record_type || record_type == null) { return null }\n        if(!record_id || record_id == null) { return null }\n\n        return this._db?.[record_type]?.[record_id]?.['item'] || null\n\n    }\n\n    add(thing){\n        return this.set(thing)\n    }\n\n    push(thing){\n        return this.set(thing)\n    }\n\n    \n    set(thing){\n\n        if(Array.isArray(thing)){\n            thing.map(x => set(x))\n        }\n\n        \n        let record_type = thing.record_type\n        let record_id = thing.record_id\n\n        if(!record_type || record_type == null) { return null }\n        if(!record_id || record_id == null) { return null }\n\n        this._db[record_type] = this._db[record_type] || {}\n        this._db[record_type][record_id] = this._db[record_type][record_id] || {}\n\n        // Merge with current item if exists\n        let currentElement = this._db[record_type][record_id]?.item\n        if(currentElement && currentElement.record_type){\n            currentElement.merge(thing)\n        } else {\n            this._db[record_type][record_id].item = thing\n        }\n        this._db[record_type][record_id].date = Date()\n    }\n\n\n    post(thing){\n        return this.set(thing)\n    }\n\n    get things(){\n\n        let things = []\n        for(let record_type of Object.keys(this._db)){\n\n            for(let record_id of Object.keys(this._db[record_type])){\n\n                if(record_type && record_type != null){\n                    if(record_id && record_id != null){\n                        let thing = this.get(record_type, record_id)\n                        things.push(thing)\n                    }\n                }\n\n            }\n        }\n        return things\n    }\n\n}\n\n","\nexport const thingComparison = {\n\n    lt: lt,\n    gt: gt,\n    eq: eq,\n    merge: merge\n    \n}\n\n\nfunction lt(thisThing, otherThing) {\n    if (thisThing.record_type < otherThing.record_type) {\n        return true;\n    }\n    if (thisThing.record_type > otherThing.record_type) {\n        return false;\n    }\n\n    if (thisThing.record_id < otherThing.record_id) {\n        return true;\n    }\n    if (thisThing.record_id > otherThing.record_id) {\n        return false;\n    }\n\n    return false;\n}\n\nfunction gt(thisThing, otherThing) {\n    if (thisThing.record_type > otherThing.record_type) {\n        return true;\n    }\n    if (thisThing.record_type < otherThing.record_type) {\n        return false;\n    }\n\n    if (thisThing.record_id > otherThing.record_id) {\n        return true;\n    }\n    if (thisThing.record_id < otherThing.record_id) {\n        return false;\n    }\n    return false;\n}\n\nfunction eq(thisThing, otherThing) {\n    if (thisThing.record_type != otherThing.record_type) {\n        return false;\n    }\n    if (thisThing.record_id != otherThing.record_id) {\n        return false;\n    }\n\n    return true;\n}\n\n\nfunction merge(thisThing, otherThing){\n    // Inserts otherThing in thisThing thing\n\n    if(thisThing.eq(otherThing) == false){ return }\n\n    for(let otherThingP of otherThing._properties){\n\n        let thisThingP = thisThing.getProperty(otherThingP.propertyID)\n        thisThingP.merge(otherThingP)\n\n    }\n    return\n\n}","import { KrProperty } from \"../../class_property/class_property.js\";\n\n\nexport const propertyManipulation = {\n    get: getProperty,\n    getAll: getProperties,\n    set: setProperty\n}\n\n\nfunction getProperty(thisThing, propertyID) {\n    /**\n     * Returns property of\n     */\n\n\n    if(!propertyID || propertyID == null){ return null }\n\n    let propertiesID =  propertyID.split('.')\n    let pID =  propertyID.split('.')[0]\n    let otherIDS = propertyID.split('.').slice(1)\n\n    // Find property object\n    let property \n    for (let i = 0; i < thisThing._properties.length; i++) {\n        if (thisThing._properties[i].propertyID == pID) {\n            property = thisThing._properties[i];\n        }\n    }\n\n    // Create property object if missing\n    if(!property || property == null){\n        property = new KrProperty(propertyID);\n        thisThing._properties.push(property);\n    }\n\n    // Recurse\n\n    if( otherIDS.length > 0){\n\n        if (!property.value?.record_type){\n            return null\n        } else {\n            return property.value.getProperty(otherIDS.join('.'))\n        }\n\n    } else {\n        return property;\n\n    }\n\n}\n\n\n\nfunction getProperties(thisThing) {\n    /**\n     * Returns list of KrProperty object in alphabetical order\n     */\n    return thisThing._properties.toSorted((a, b) => {\n        return a.lt(b);\n    });\n}\n\n\n\n\n\nfunction setProperty(\n    thisThing,\n    propertyID,\n    value,\n    credibility,\n    observationDate,\n    actionType,\n    previousValue,\n) {\n\n\n    // Handle dot notation\n    if(propertyID.includes('.')){\n\n        let pID = propertyID.split('.')[0]\n        let otherIDS = propertyID.split('.').slice(1)\n\n        let p = thisThing.getProperty(pID);\n\n        // If not value, create new KrThing\n        if(!p.value?.record_type){\n            p.setValues(\n                thisThing.new('Thing'),\n                metadataRecord,\n                actionType,\n                null,\n            );\n        }\n\n        // Set value\n        p.value.setProperty(otherIDS.join('.'), value)\n        return p\n\n    }\n\n    // Get old value\n    let oldValue = thisThing.getProperty(propertyID)?.values;\n\n    // get or create property object\n\n    let property = thisThing.getProperty(propertyID);\n    if (!property) {\n        property = new KrProperty(propertyID);\n        thisThing._properties.push(property);\n    }\n\n    // Iterate through values and convert to KrThing if required\n    let values = ensureArray(value);\n    for (let i = 0; i < values.length; i++) {\n        if (values[i] && values[i][\"@type\"]) {\n            values[i] = thisThing.new(values[i]);\n        }\n    }\n\n    // Set metadata\n    var metadataRecord = thisThing.metadata.record;\n    if (credibility) {\n        metadataRecord.credibility = credibility;\n    }\n    if (observationDate) {\n        metadataRecord.observationDate = observationDate;\n    }\n\n    // set property value\n    var newValues = property.setValues(\n        values,\n        metadataRecord,\n        actionType,\n        previousValue,\n    );\n\n    // dispatch event\n    let newValue = thisThing.getProperty(propertyID)?.values;\n\n    if (oldValue != newValue) {\n        let data = {\n            propertyID: propertyID,\n            oldValue: oldValue,\n            newValue: newValue,\n        };\n        thisThing.dispatchEvent(actionType, data);\n    }\n\n    return newValues;\n}\n\n\n\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}","\n\nexport const consoleHelpers = {\n\n    print:print,\n    printScreen: printScreen,\n    printScreenAll: printScreenAll\n}\n\n\n\nfunction print() {\n    return this.printScreen();\n}\n\nfunction printScreen() {\n    console.log(\"----------------------------------\");\n    console.log(this.properties.length);\n    console.log(\"thing:\", this.record_type, this.record_id);\n    this.properties.map((property) => {\n        property.printScreen(\"    \");\n    });\n}\n\nfunction printScreenAll() {\n    console.log(\"----------------------------------\");\n    console.log(this.properties.length);\n    console.log(\"thing:\", this.record_type, this.record_id);\n    this.properties.map((property) => {\n        property.printScreenAll(\"    \");\n    });\n}","\nimport { KrCache } from './krakenCache.js'\n\nlet MAXLEVEL = 5\n\nexport const valueManipulation = {\n\n    getThings: getThings,\n    getSystemCreatedDate: getSystemCreatedDate,\n    getSystemUpdatedDate:getSystemUpdatedDate\n}\n\n\nfunction getThings(thisThing, cache, maxLevel=MAXLEVEL, currentLevel=0) {\n    // Gets all things objects used as values of this \n\n    if(!cache || cache == null){\n        cache = new KrCache()\n        //cache.add(thisThing)\n    }\n    \n    for (let p of thisThing._properties) {\n        for (let v of p.values) {\n            if (v?.record_type) {\n                cache.push(v)\n\n                if(currentLevel < maxLevel){\n                    getThings(v, cache, maxLevel, currentLevel + 1)\n                }\n                \n            }\n        }\n    }\n    \n    let results = cache.things\n\n    return results;\n}\n\n\n\nfunction  getSystemCreatedDate(thisThing) {\n    let resultDate = null;\n    for (let pv of thisThing.properties) {\n        let itemDate = pv.systemCreatedDate;\n        if (itemDate && (resultDate == null || itemDate < resultDate)) {\n            resultDate = itemDate;\n        }\n    }\n    return resultDate;\n}\n\nfunction getSystemUpdatedDate(thisThing) {\n    let resultDate = null;\n    for (let pv of thisThing.properties) {\n        let itemDate = pv.systemCreatedDate;\n        if (itemDate && (resultDate == null || itemDate > resultDate)) {\n            resultDate = itemDate;\n        }\n    }\n    return resultDate;\n}","\n\n\n\nexport const itemListHelpers = {\n    getFirstItem: getFirstItem,\n    getLastItem: getLastItem,\n    getItems: getItems,\n    setItems: setItems,\n    pushItem: pushItem,\n    reCalculatePosition: reCalculatePosition,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    getItem: getItem,\n    getByListItem: getByListItem,\n    getByItem: getByItem,\n};\n\nfunction getFirstItem(thisThing) {\n    let items = thisThing.getProperty(\"itemListElement\").values;\n\n    if (items.length == 0) {\n        return null;\n    }\n\n    for (let item of items) {\n        if (!item.previousItem || item.previousItem == null) {\n            return item;\n        }\n    }\n\n    for (let item of items) {\n        if (item.position == 0) {\n            return item;\n        }\n    }\n\n    return null;\n}\n\nfunction getLastItem(thisThing) {\n    let items = thisThing.getProperty(\"itemListElement\").values;\n\n    if (items.length == 0) {\n        return null;\n    }\n    for (let item of items) {\n        if (item.nextItem === undefined || item.nextItem == null) {\n            return item;\n        }\n    }\n    return null;\n}\n\nfunction getItems(thisThing) {\n    let results = [];\n    let t = thisThing.firstItem;\n\n    while (t && t != null) {\n        results.push(t);\n        t = t.nextItem;\n    }\n\n    return results;\n}\n\nfunction setItems(thisThing, values) {\n    values = ensureArray(values);\n\n    pushItems(thisThing, values)\n}\n\nfunction pushItem(thisThing, listItems) {\n    \n    listItems = ensureArray(listItems);\n\n    // Prepare listItems\n    let newListItems = []\n    for (let listItem of listItems) {\n\n        // Check if thing, else convert to one\n        if (!listItem.record_type) {\n            let newListItem = thisThing.new();\n            newListItem.record = listItem;\n            listItem = newListItem;\n        }\n\n        // Check if ListItem, else convert to one\n        if (listItem.record_type != \"ListItem\") {\n            let newListItem = thisThing.new(\"ListItem\");\n            newListItem.item = listItem;\n            listItem = newListItem;\n        }\n        newListItems.push(listItem)\n    }\n\n\n    \n    // Set previous, next and position\n    let lastListItem = getLastItem(thisThing);\n    let newListItemsLength = newListItems.length\n    \n    for(let i=0; i< newListItemsLength; i++){\n        \n        let listItem = newListItems[i]\n        \n        if (lastListItem && lastListItem != null) {\n            listItem.position = lastListItem.position + 1;\n            listItem.previousItem = lastListItem;\n            lastListItem.nextItem = listItem\n        } else {\n            listItem.position = 0;\n        }\n        lastListItem = listItem\n\n    }\n\n    // Add to property\n    thisThing.addProperty(\"itemListElement\", newListItems);\n    \n    return; //listItem\n}\n\nfunction reCalculatePosition(thisThing) {\n    return;\n    let t = thisThing.firstItem;\n\n    var position = 0;\n\n    while (t && t != null) {\n        t.position = position;\n        position = position + 1;\n        t = t.nextItem;\n    }\n}\n\n// -----------------------------------------------------\n//  CRUD for items\n// -----------------------------------------------------\n\nfunction remove(thisThing, itemRef) {\n    var item = thisThing.getItem(itemRef);\n    if (!item) {\n        return null;\n    }\n\n    var p = item.previousItem;\n    var n = item.nextItem;\n\n    // Ressign before and after links to one another\n    if (p) {\n        p.nextItem = n;\n    }\n    if (n) {\n        n.previousItem = p;\n    }\n\n    // Remove from list\n    thisThing.deleteProperty(\"itemListElement\", item);\n\n    // Sets position\n    item.position = null;\n\n    // Sets position\n    let position = 0;\n    if (n) {\n        position = n.position - 1;\n        n.position = position;\n    }\n\n    let nextItem = n?.nextItem;\n    while (nextItem) {\n        nextItem.position = position + 1;\n        position = position + 1;\n        nextItem = nextItem.nextItem;\n    }\n\n    //thisThing.reCalculatePosition()\n\n    // Remove links\n    item.previousItem = null;\n    item.nextItem = null;\n\n    return;\n}\n\nfunction insertBefore(thisThing, referenceItem, refItemtoInsert) {\n    let item;\n    // Convert to ListItem if not one already\n    if (!(refItemtoInsert instanceof KrListItem)) {\n        refItemtoInsert = new KrListItem(refItemtoInsert);\n        item = refItemtoInsert;\n    } else {\n        item = thisThing.getItem(refItemtoInsert.ref);\n    }\n\n    // Retrieve latest ListItem record\n\n    var n = thisThing.getItem(referenceItem);\n    var p = p.previousItem;\n\n    // Stop events\n    thisThing.blockEvents();\n    if (item) {\n        item.blockEvents();\n    }\n    if (p) {\n        p.blockEvents();\n    }\n    if (n) {\n        n.blockEvents();\n    }\n\n    // Remove previous links of items\n    if (\n        (item.previousItem && item.previousItem != null) ||\n        (item.nextItem && item.nextItem != null)\n    ) {\n        thisThing.remove(item.ref);\n    }\n\n    // Change allocation\n    item.previousItem = p;\n    item.nextItem = n;\n\n    if (p) {\n        p.nextItem = item;\n    } else {\n        p.nextItem = null;\n    }\n    if (n) {\n        n.previousItem = item;\n    } else {\n        n.previousItem = null;\n    }\n\n    // Start events\n    thisThing.allowEvents();\n    if (item) {\n        item.allowEvents();\n    }\n    if (p) {\n        p.allowEvents();\n    }\n    if (n) {\n        n.allowEvents();\n    }\n\n    // Sets position\n    let position = 0;\n    if (p) {\n        position = p.position + 1;\n    }\n\n    item.position = position;\n    let nextItem = item.nextItem;\n    while (nextItem) {\n        nextItem.position = position + 1;\n        position = position + 1;\n        nextItem = nextItem.nextItem;\n    }\n\n    //  Add to list\n    let t = thisThing.getItem(refItemtoInsert.ref);\n    if (!t || t == null) {\n        thisThing.addProperty(\"itemListElement\", refItemtoInsert);\n    }\n\n    return item;\n}\n\nfunction insertAfter(thisThing, referenceItem, refItemtoInsert) {\n    /**\n     *\n     */\n\n    let item;\n    // Convert to ListItem if not one already\n    if (!(refItemtoInsert instanceof KrListItem)) {\n        refItemtoInsert = new KrListItem(refItemtoInsert);\n        item = refItemtoInsert;\n    } else {\n        item = thisThing.getItem(refItemtoInsert.ref);\n    }\n\n    // Stop events\n    thisThing.blockEvents();\n    if (item) {\n        item.blockEvents();\n    }\n    if (p) {\n        p.blockEvents();\n    }\n    if (n) {\n        n.blockEvents();\n    }\n\n    // Remove previous links of items\n    if (\n        (item.previousItem && item.previousItem != null) ||\n        (item.nextItem && item.nextItem != null)\n    ) {\n        thisThing.remove(item.ref);\n    }\n\n    var p = thisThing.getItem(referenceItem);\n    var n = p.nextItem;\n\n    // Change allocation\n    item.previousItem = p;\n    item.nextItem = n;\n\n    if (p) {\n        p.nextItem = item;\n    } else {\n        p.nextItem = null;\n    }\n    if (n) {\n        n.previousItem = item;\n    } else {\n        n.previousItem = null;\n    }\n\n    // Start events\n    thisThing.allowEvents();\n    if (item) {\n        item.allowEvents();\n    }\n    if (p) {\n        p.allowEvents();\n    }\n    if (n) {\n        n.allowEvents();\n    }\n\n    // Change position\n    let position = 0;\n    if (p) {\n        position = p.position + 1;\n    }\n\n    item.position = position;\n    let nextItem = item.nextItem;\n    while (nextItem) {\n        nextItem.position = position + 1;\n        position = position + 1;\n        nextItem = nextItem.nextItem;\n    }\n\n    //  Add to list\n    let t = thisThing.getItem(refItemtoInsert.ref);\n    if (!t || t == null) {\n        thisThing.addProperty(\"itemListElement\", refItemtoInsert);\n    }\n\n    return item;\n}\n\nfunction getItem(thisThing, ref) {\n    if (!ref) {\n        return null;\n    }\n\n    if (ref && ref.ref) {\n        ref = ref.ref;\n    }\n\n    if (!ref || !ref[\"@type\"] || ref[\"@type\"] == null) {\n        return null;\n    }\n\n    if (ref[\"@type\"] == \"ListItem\") {\n        return getByListItem(thisThing, ref);\n    } else {\n        return getByItem(thisThing, ref);\n    }\n}\n\nfunction getByListItem(thisThing, ref) {\n    let items = thisThing.getProperty(\"itemListElement\").values;\n\n    for (let item of items) {\n        if (item.record_type == ref[\"@type\"] && item.record_id == ref[\"@id\"]) {\n            return item;\n        }\n    }\n    return null;\n}\n\nfunction getByItem(thisThing, ref) {\n    let items = thisThing.getProperty(\"itemListElement\").values;\n    for (let item of items) {\n        if (\n            item.item.record_type == ref[\"@type\"] &&\n            item.item.record_id == ref[\"@id\"]\n        ) {\n            return item;\n        }\n    }\n    return null;\n}\n\n// -----------------------------------------------------\n//  Query attributes\n// -----------------------------------------------------\n\nfunction getParams(thisThing) {\n    let params = {};\n    if (!thisThing._params || thisThing._params == null) {\n        return {};\n    } else {\n        params = thisThing._params;\n    }\n\n    let keys = [\"limit\", \"offset\", \"orderBy\", \"orderDirection\"];\n    for (let k of keys) {\n        let v = this[k];\n        if (v && v != null) {\n            params[k] = v;\n        }\n    }\n    return params;\n}\n\nfunction setParams(thisThing, value) {\n    thisThing._params = value;\n}\n\n// -----------------------------------------------------\n//  Filters\n// -----------------------------------------------------\n\nfunction filter(thisThing, propertyValueSpecifications) {\n    /**\n     * Returns new Things with filtered items\n     */\n\n    let newThings = new KrThings();\n\n    for (let item of getItems(thisThing)) {\n        let result = propertyValueSpecifications.map((pvs) =>\n            pvs.test(item.item),\n        );\n\n        if (result.every(Boolean) == true) {\n            newThings.add(item.item);\n        }\n    }\n\n    return newThings;\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n"],"names":[],"version":3,"file":"main.js.map"}