{"mappings":"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","sources":["src/index.js","src/modules/class_thing/class_thing.js","src/modules/class_property/class_property.js","src/modules/class_propertyValue/class_propertyValue.js","src/modules/class_metadata/class_metadata.js"],"sourcesContent":["\nimport { KrThing as KrThingRecord } from './modules/class_thing/class_thing.js';\nimport { KrProperty as KrPropertyRecord } from './modules/class_property/class_property.js';\nimport { KrPropertyValue as KrPropertyValueRecord } from './modules/class_propertyValue/class_propertyValue.js';\n\n//export var KrThing() { return KrThingRecord }\n//export function KrProperty() { return KrPropertyRecord }\n//export function KrPropertyValue() { return KrPropertyValueRecord }\n\nexport var KrThing = KrThingRecord\nexport var KrProperty = KrPropertyRecord\nexport var KrPropertyValue = KrPropertyValueRecord\n\n\n\n","import { v4 as uuidv4 } from 'uuid';\n\n\n\nimport { KrProperty } from \"../class_property/class_property.js\";\n\nimport { KrMetadata } from \"../class_metadata/class_metadata.js\";\n//import { KrListItem } from \"../../../kraken_thing.js\";\n\nlet MAX_DEPTH = 6;\n\nexport class KrThing {\n    /*\n\n    attributes:\n    - record_type:\n    - record_id: \n    - record: \n    - ref:            returns dict with @type and @id\n    - fullRecord:     returns native records from class objects (nested)\n    - properties:     returns list of KrProperties\n    - json:           returns this.record as json\n\n    Methods\n    - getProperty: \n    - setProperty:\n    - get (same as getProperty):\n    - set (same as setProperty):\n\n    */\n\n    constructor(record_type = null, record_id = null) {\n        this._properties = [];\n\n        this._callbacks = {};\n\n        // metadata\n        this.metadata = new KrMetadata();\n\n        // if record_type is a dict, treat as record instead\n        if (record_type && record_type[\"@type\"])\n            this.setFullRecord(record_type);\n\n        //\n        if (record_type && !record_type[\"@type\"]) {\n            this.setProperty(\"@type\", record_type);\n        }\n        if (record_id) {\n            this.setProperty(\"@id\", record_id);\n        }\n\n        if (!this.record_id || this.record_id == null) {\n            record_id = String(uuidv4());\n        }\n    }\n\n    // -----------------------------------------------------\n    //  events\n    // -----------------------------------------------------\n\n    addEventListener(eventType, callback) {\n        if (typeof callback !== \"function\") return;\n\n        if (!eventType || eventType == null) {\n            eventType == \"all\";\n        }\n        if (this._callbacks[eventType] === undefined) {\n            this._callbacks[eventType] = [];\n        }\n        \n\n        this._callbacks[eventType].push(callback);\n    }\n\n    dispatchEvent(eventType, data) {\n        //if (this._callbacks[eventType] === undefined) return;\n\n        const event = {\n            type: eventType,\n            target: this,\n            data: data,\n        };\n\n        if (this._callbacks[eventType] === undefined) {\n            this._callbacks[eventType] = [];\n        }\n\n        if (this._callbacks['all'] === undefined) {\n            this._callbacks['all'] = [];\n        }\n        \n        this._callbacks[eventType].forEach((callback) => {\n            callback(event);\n        });\n\n        this._callbacks[\"all\"].forEach((callback) => {\n            callback(event);\n        });\n    }\n\n    // ----------------------------------------------------\n    // Attributes\n    // ----------------------------------------------------\n\n    get record_type() {\n        return this.getProperty(\"@type\").value;\n    }\n    set record_type(value) {\n        if (!value) {\n            return;\n        }\n        return this.setProperty(\"@type\", value);\n    }\n    get record_id() {\n        let record_id =  this.getProperty(\"@id\").value;\n        if(!record_id || record_id == null){\n            this.record_id = String(uuidv4())\n        }\n        return this.getProperty(\"@id\").value;\n    }\n    set record_id(value) {\n        if (!value) {\n            return;\n        }\n        return this.setProperty(\"@id\", value);\n    }\n    get ref() {\n        return { \"@type\": this.record_type, \"@id\": this.record_id };\n    }\n\n    get properties() {\n        /**\n         * Returns list of KrProperty object in alphabetical order\n         */\n\n        //function compare(a, b) { return a.lt(b) }\n        //return this._properties.toSorted(compare);\n        return this._properties.toSorted((a, b) => {\n            return a.lt(b);\n        });\n    }\n\n    get things(){\n        // return all things \n\n        return this.getThings([this.record_type + '/' + this.record_id])\n    }\n\n    getThings(db=[]){\n\n        let results = []\n\n        for(let p of this._properties){\n            for(let v of p.values){\n                if (v?.record_type){\n                    let id = v?.record_type + '/' + v.record_id\n                    if(!db.includes(id)){\n                        results.push(v)\n                        db.push(id)\n                        results = results.concat(v.getThings(db))\n                    }\n                }\n            }\n        }\n        results = results.filter(function (el) {\n            return el != null;\n        });\n\n        return results\n\n        \n    }\n\n\n\n    \n    // ----------------------------------------------------\n    // Records\n    // ----------------------------------------------------\n\n    get record() {\n        return this.getFullRecord(0);\n    }\n    set record(value) {\n        this.setFullRecord(value);\n    }\n    get fullRecord() {\n        return this.getFullRecord(0);\n    }\n    set fullRecord(value) {\n        this.setFullRecord(value);\n    }\n    get bestRecord() {\n        return this.getBestRecord(0);\n    }\n    set bestRecord(value) {\n        this.setBestRecord(value);\n    }\n    get refRecord() {\n        return this.getRefRecord(0);\n    }\n    set refRecord(value) {\n        this.setRefRecord(value);\n    }\n\n    getFullRecord(depth = 0) {\n        if (depth && depth > MAX_DEPTH) {\n            return this.ref;\n        }\n\n        let record = {};\n        let properties = this.properties;\n        for (let p of properties) {\n            record[p.propertyID] = p.getFullRecord(depth+1);\n        }\n        record[\"@type\"] = this.record_type;\n        record[\"@id\"] = this.record_id;\n\n        record = simplify(record)\n        return record;\n    }\n\n    setFullRecord(value) {\n        this._properties = [];\n        Object.keys(value).forEach((key) => {\n            this.addProperty(key, value[key]);\n        });\n    }\n\n    getRefRecord(depth = 0) {\n        let record = {};\n\n        for (let i = 0; i < this.properties.length; i++) {\n            record[this.properties[i].propertyID] =\n                this.properties[i].getRefRecord(depth);\n        }\n        record[\"@type\"] = this.record_type;\n        record[\"@id\"] = this.record_id;\n        record = simplify(record)\n        return record;\n    }\n\n    getBestRecord(depth = 0) {\n        if (depth > MAX_DEPTH) {\n            return this.ref;\n        }\n\n        let record = {};\n\n        for (let i = 0; i < this.properties.length; i++) {\n            record[this.properties[i].propertyID] = this.properties[\n                i\n            ].getBestRecord(depth+1);\n        }\n        record[\"@type\"] = this.record_type;\n        record[\"@id\"] = this.record_id;\n        return record;\n    }\n\n    // ----------------------------------------------------\n    // System records\n    // ----------------------------------------------------\n\n    get systemRecord() {\n        return this.getSystemRecord(0);\n    }\n    set systemRecord(value) {\n        this.setSystemRecord(value);\n    }\n    get rawRecord() {\n        return this.getSystemRecord(0);\n    }\n    set rawRecord(value) {\n        this.setSystemRecord(value);\n    }\n\n    getSystemRecord(depth) {\n        if (depth > MAX_DEPTH) {\n            return this.ref;\n        }\n\n        let record = {};\n        record[\"@type\"] = this.record_type;\n        record[\"@id\"] = this.record_id;\n        record.properties = {}\n        record.summary = this.getFullRecord()\n       \n        \n        for (let p of this.properties) {\n            record['properties'][p.propertyID] = p.getSystemRecord(depth);\n        }\n\n        \n        return record;\n    }\n\n    setSystemRecord(value) {\n        // Load data into object\n\n        if (!value || !value.properties) {\n            return;\n        }\n        // Reset current properties\n        this._properties = [];\n\n        // convert sub things to KrThing\n        var keys = Object.keys(value.properties);\n        for (let key of keys) {\n            let properties = value.properties[key];\n            properties = ensureArray(properties)\n            for (let propertyValue of properties) {\n               \n                if (propertyValue?.object.value?.[\"@type\"]) {\n                    var thing = this.new(\n                        propertyValue.object.value[\"@type\"],\n                        propertyValue.object.value[\"@id\"],\n                    );\n                    thing.setSystemRecord(propertyValue.object.value);\n                    propertyValue.object.value = thing;\n                }\n            }\n        }\n\n        // load data\n        var keys = Object.keys(value.properties);\n        for (let key of keys) {\n            var property = new KrProperty(key);\n            property.setSystemRecord(value.properties[key]);\n            this._properties.push(property);\n        }\n    }\n\n    // ----------------------------------------------------\n    // Methods\n    // ----------------------------------------------------\n\n    getProperty(propertyID) {\n        /**\n         * Returns property of\n         */\n\n\n        if(!propertyID || propertyID == null){ return null }\n        \n        let propertiesID =  propertyID.split('.')\n        let pID =  propertyID.split('.')[0]\n        let otherIDS = propertyID.split('.').slice(1)\n\n        // Find property object\n        let property \n        for (let i = 0; i < this._properties.length; i++) {\n            if (this._properties[i].propertyID == pID) {\n                property = this._properties[i];\n            }\n        }\n\n        // Create property object if missing\n        if(!property || property == null){\n            property = new KrProperty(propertyID);\n            this._properties.push(property);\n        }\n\n        // Recurse\n\n        if( otherIDS.length > 0){\n\n            if (!property.value?.record_type){\n                return null\n            } else {\n                return property.value.getProperty(otherIDS.join('.'))\n            }\n            \n        } else {\n            return property;\n            \n        }\n\n    }\n\n    addProperty(propertyID, value, credibility, observationDate) {\n        return this._updateProperty(\n            propertyID,\n            value,\n            credibility,\n            observationDate,\n            \"addAction\",\n        );\n    }\n\n    deleteProperty(propertyID, value, credibility, observationDate) {\n        return this._updateProperty(\n            propertyID,\n            value,\n            credibility,\n            observationDate,\n            \"deleteAction\",\n        );\n    }\n\n    replaceProperty(\n        propertyID,\n        previousValue,\n        newValue,\n        credibility,\n        observationDate,\n    ) {\n        return this._updateProperty(\n            propertyID,\n            newValue,\n            credibility,\n            observationDate,\n            \"replaceAction\",\n            previousValue,\n        );\n    }\n\n    setProperty(propertyID, value, credibility, observationDate) {\n        return this.replaceProperty(\n            propertyID,\n            null,\n            value,\n            credibility,\n            observationDate,\n        );\n    }\n\n    _updateProperty(\n        propertyID,\n        value,\n        credibility,\n        observationDate,\n        actionType,\n        previousValue,\n    ) {\n\n\n        // Handle dot notation\n        if(propertyID.includes('.')){\n\n            let pID = propertyID.split('.')[0]\n            let otherIDS = propertyID.split('.').slice(1)\n            \n            let p = this.getProperty(pID);\n\n            // If not value, create new KrThing\n            if(!p.value?.record_type){\n                p.setValues(\n                    new KrThing('Thing'),\n                    metadataRecord,\n                    actionType,\n                    null,\n                );\n            }\n\n            // Set value\n            p.value.setProperty(otherIDS.join('.'), value)\n            return p\n            \n        }\n\n\n\n        \n        // Get olf value\n        let oldValue = this.getProperty(propertyID)?.value;\n\n        // get or create property object\n        \n        let property = this.getProperty(propertyID);\n        if (!property) {\n            property = new KrProperty(propertyID);\n            this._properties.push(property);\n        }\n\n        // Iterate through values and convert to KrThing if required\n        let values = ensureArray(value);\n        for (let i = 0; i < values.length; i++) {\n            if (values[i] && values[i][\"@type\"]) {\n                values[i] = this.new(values[i]);\n            }\n        }\n\n        // Set metadata\n        var metadataRecord = this.metadata.record;\n        if (credibility) {\n            metadataRecord.credibility = credibility;\n        }\n        if (observationDate) {\n            metadataRecord.observationDate = observationDate;\n        }\n\n        // set property value\n        var newValues = property.setValues(\n            values,\n            metadataRecord,\n            actionType,\n            previousValue,\n        );\n\n        // dispatch event\n        let newValue = this.getProperty(propertyID)?.value;\n\n        if (oldValue != newValue) {\n            let data = {\n                propertyID: propertyID,\n                oldValue: oldValue,\n                newValue: newValue,\n            };\n            this.dispatchEvent(actionType, data);\n        }\n\n        return newValues;\n    }\n\n    get(propertyID) {\n        return this.getProperty(propertyID);\n    }\n    set(propertyID, value) {\n        return this.setProperty(propertyID, value);\n    }\n\n    new(record_type, record_id) {\n        return new KrThing(record_type, record_id);\n    }\n\n    // ----------------------------------------------------\n    // Dot notation\n    // ----------------------------------------------------\n\n    dotGet(path) {}\n\n    dotSet(path, value) {}\n\n    // ----------------------------------------------------\n    // Comparisons\n    // ----------------------------------------------------\n\n    lt(other) {\n        if (this.record_type < other.record_type) {\n            return true;\n        }\n        if (this.record_type > other.record_type) {\n            return false;\n        }\n\n        if (this.record_id < other.record_id) {\n            return true;\n        }\n        if (this.record_id > other.record_id) {\n            return false;\n        }\n\n        return false;\n    }\n\n    gt(other) {\n        if (this.record_type > other.record_type) {\n            return true;\n        }\n        if (this.record_type < other.record_type) {\n            return false;\n        }\n\n        if (this.record_id > other.record_id) {\n            return true;\n        }\n        if (this.record_id < other.record_id) {\n            return false;\n        }\n        return false;\n    }\n\n    eq(other) {\n        if (this.record_type != other.record_type) {\n            return false;\n        }\n        if (this.record_id != other.record_id) {\n            return false;\n        }\n\n        return true;\n    }\n\n    printScreen() {\n        console.log(\"----------------------------------\");\n        console.log(this.properties.length);\n        console.log(\"thing:\", this.record_type, this.record_id);\n        this.properties.map((property) => {\n            property.printScreen(\"    \");\n        });\n    }\n}\n\nfunction ensureNotArray(value) {\n    let new_value = ensureArray(value);\n    if (new_value.length > 0) {\n        return new_value[0];\n    } else {\n        return null;\n    }\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n\nfunction simplify(data) {\n    // Remove arrays of 1\n    //return data\n\n    if (Array.isArray(data)) {\n        // If the array has exactly one element, return that element\n        if (data.length === 1) {\n            return simplify(data[0]);\n        } else {\n            // Otherwise, process each element in the array\n            return data.map(simplify);\n        }\n    } else if (data !== null && typeof data === 'object') {\n        // If the data is an object, process each key\n        const newData = {};\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                newData[key] = simplify(data[key]);\n            }\n        }\n        return newData;\n    } else {\n        // If the data is neither an array nor an object, return it as is\n        return data;\n    }\n}\n","import { KrPropertyValue } from \"../class_propertyValue/class_propertyValue.js\";\nimport { KrMetadata } from \"../class_metadata/class_metadata.js\";\n\nexport class KrProperty {\n    /*\n\n    attributes:\n    - propertyID:     string\n    - propertyValue:         get best KrPropertyValue object or sets a value\n    - propertyValues:        get best KrPropertyValue object for each values\n    - propertyValuesAll:     get all KrPropertyValue\n    - value:                 return best value\n    - values:                return values\n    - record:        get value as non Kr object  \n\n    methods:\n    - gt: greater than a.gt(b) a is greater than b\n    - lt: less than a.lt(b) a is less than b\n    - setValues:     Sets several values\n    - setValue:      Sets a single value and returns a KrPropertyValue object\n    - get_max:       Returns best KrPropertyValue object\n    \n    */\n\n    constructor(propertyID = null) {\n        this._propertyID = propertyID;\n        this._propertyValues = [];\n\n        this.metadata = new KrMetadata();\n    }\n    // Base\n    get propertyID() {\n        return this._propertyID;\n    }\n    set propertyID(record) {\n        this._propertyID = ensureNotArray(value);\n    }\n\n    gt(other) {\n        if (this.propertyID == other.propertyID) {\n            return false;\n        }\n        if (this.propertyID == \"@type\") {\n            return false;\n        }\n        if (other.propertyID == \"@type\") {\n            return true;\n        }\n        if (this.propertyID == \"@id\") {\n            return false;\n        }\n        if (other.propertyID == \"@id\") {\n            return true;\n        }\n\n        if (this.propertyID > other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n    lt(other) {\n        if (this.propertyID == other.propertyID) {\n            return false;\n        }\n        if (this.propertyID == \"@type\") {\n            return true;\n        }\n        if (other.propertyID == \"@type\") {\n            return false;\n        }\n        if (this.propertyID == \"@id\") {\n            return true;\n        }\n        if (other.propertyID == \"@id\") {\n            return false;\n        }\n\n        if (this.propertyID < other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n\n    eq(other) {\n        if (this.propertyID && this.propertyID == other.propertyID) {\n            return true;\n        }\n        return false;\n    }\n\n    //\n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n    \n    getFullRecord(depth=0) {\n        return this._propertyValues.map((x) => x.getFullRecord(depth) )\n    }\n\n    getRefRecord(depth=0){\n        return this._propertyValues.map((x) => x.getRefRecord(depth) )\n    }\n\n    getBestRecord(depth=0){\n\n        let p = this.propertyValue\n        if(p && p != null ){\n            return [p.getBestRecord(depth)]\n        }\n        return []\n    }\n\n    \n    \n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n\n\n    getSystemRecord(depth=0){\n        return this._propertyValues.map((x) => x.getSystemRecord(depth) )\n    }\n\n    setSystemRecord(value){\n\n        this._propertyValues=[];\n        var values = ensureArray(value);\n        for(let value of values){\n            var propertyValue = new KrPropertyValue();\n            propertyValue.setSystemRecord(value)\n            this._propertyValues.push(propertyValue);\n        };\n    }\n    \n\n    // ----------------------------------------------------\n    // PropertyValues \n    // ----------------------------------------------------\n\n    get propertyValue() {\n        // return best property value object\n        return this.propertyValues[0];\n    }\n\n    get propertyValues(){\n        // returns best pv for each different value\n\n        var results = [];\n        const values = [...new Set(this.propertyValuesAll.map((x) => x.value ))];\n        values.forEach((value) => {\n            const filteredPV = this.propertyValuesAll.filter((item) => item.value == value);\n            let maxPV = filteredPV.reduce((maxItem, item) => maxItem.gt(item) ? maxItem : item);\n            \n            results.push(maxPV)\n        })\n        return results;\n    }\n\n    get propertyValuesNet(){\n\n        let results = [];\n        // process additions\n\n        // Process additions        \n        results = results.concat(this.propertyValues.filter((item) => item.record_type == 'addAction'));\n        results = results.concat(this.propertyValues.filter((item) => item.record_type == 'replaceAction'));\n\n        \n        // Process deletions and replacements\n        this.propertyValues.filter((item) => item.record_type == 'replaceAction').forEach((filteredItem) => {\n            results = results.filter((result) => !(result.lt(filteredItem) && (filteredItem.replacee == null ||  filteredItem.replacee == result.value )));\n        });\n        \n        this.propertyValues.filter((item) => item.record_type == 'deleteAction').forEach((filteredItem) => {\n            results = results.filter((result) => !(result.lt(filteredItem) && result.value == filteredItem.value));\n        });\n        \n        return results;\n    }\n\n    \n    get propertyValuesAll() {\n        // return in reverse order\n        function compare(a, b) {\n            if(a.gt(b)){return -1};\n            if(a.lt(b)){return 1};\n            return 0;\n        };\n        return this._propertyValues.toSorted(compare);\n    }\n\n    // ----------------------------------------------------\n    // Values \n    // ----------------------------------------------------\n\n    get value() {\n        // Return value element of best propertyValue object\n        if (this.propertyValue){\n            return this.propertyValue.value;\n        }\n        return null;\n    }\n\n    set value(value) {\n        return this.setValues(value);\n    }\n    \n    get values() {\n        // Return value elements of all propertyValue object in order\n        return this.propertyValuesNet.map((x) => x.value );\n    }\n\n    setValues(value, metadataRecord, actionType) {\n        let results = [];\n        let values = ensureArray(value);\n        for (let i = 0; i < values.length; i++) {\n            results.push(this.setValue(values[i], metadataRecord, actionType));\n        }\n        return results;\n    }\n\n    setValue(value, metadataRecord, actionType) {\n        let newValueObject = value;\n        if (!(newValueObject instanceof KrPropertyValue)) {\n            newValueObject = new KrPropertyValue(this.propertyID, value, actionType);\n        }\n        newValueObject.metadata.inheritMetadata(metadataRecord);\n        this._propertyValues.push(newValueObject);\n        newValueObject.metadata.position = this._propertyValues.length;\n        return newValueObject;\n    }\n    printScreen(suffix=''){\n\n        var v = this.value;\n        if (this.value && this.value.record_type) {\n            v = this.value.record_type + \"/\" + this.value.record_id;\n        };\n\n        console.log(suffix, \" - \", this.propertyID, \": \", v);\n\n        console.log(suffix, \"       Net\");\n        this.propertyValuesNet.map((propertyValue) => {\n\n            propertyValue.printScreen(suffix + '        ');\n\n        });\n        console.log(suffix, \"       Raw\");\n        this.propertyValuesAll.map((propertyValue) => {\n\n            propertyValue.printScreen(suffix + '        ');\n\n        });\n    }\n}\n\n\nfunction ensureNotArray(value) {\n    let new_value = ensureArray(value);\n    if (new_value.length > 0) {\n        return new_value[0];\n    } else {\n        return null;\n    }\n}\n\nfunction ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    } else {\n        return [value];\n    }\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { KrMetadata } from '../class_metadata/class_metadata.js';\n\nexport class KrPropertyValue {\n    /*\n\n    attributes:\n    - proeprtyID:\n    - value: \n    - c: \n    - d:\n\n    */\n    constructor(propertyID, value, actionType=\"replaceAction\", previousValue) {\n\n        this._record = {\n            \"@type\": actionType,\n            \"@id\": String(uuidv4()),\n            \"object\": {\n                \"@type\": \"propertyValue\",\n                propertyID: propertyID,\n                value: value,\n            },\n            actionStatus: 'completedActionStatus',\n            replacee: previousValue,\n            replacer: value\n        };\n\n        this.metadata = new KrMetadata();\n    \n        }\n\n    // ----------------------------------------------------\n    // Attributes - action\n    // ----------------------------------------------------\n\n    get record_type(){\n        return this._record[\"@type\"];\n    }\n    set record_type(value){\n        this._record[\"@type\"] = value;\n    }\n    get record_id(){\n        return this._record[\"@id\"];\n    }\n    set record_id(value){\n        this._record[\"@id\"] = value;\n    }\n    get object(){\n        return this._record.object;\n    }\n    set object(value){\n        this._record.object =value;\n    }\n    get replacer(){\n        return this._record.replacer;\n    }\n    set replacer(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n        }\n\n    get record(){\n\n        let record = this._record\n        \n        \n    }\n    \n\n    \n    // ----------------------------------------------------\n    // Attributes - object\n    // ----------------------------------------------------\n    \n    get propertyID(){\n        return this._record.object.propertyID;\n    }\n    set propertyID(value){\n        this._record.object.object.propertyID = value;\n    }\n    get value(){\n        return this._record.object.value;\n    }\n    set value(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n        }\n\n    // ----------------------------------------------------\n    // Attributes - metadata\n    // ----------------------------------------------------\n\n    get t(){\n        return this._record.t;\n    }\n    set t(value){\n         this._record.t = value;\n    }\n    get value(){\n        return this._record.object.value;\n    }\n    set value(value){\n        this._record.object.value = ensureNotArray(value);\n        this._record.replacer = ensureNotArray(value);\n        }\n    get agent(){\n        return this.metadata.agent;\n    }\n    set agent(value){\n        this.metadata.agent = value;\n    }\n    get instrument(){\n        return this.metadata.instrument;\n    }\n    set instrument(value){\n        this.metadata.instrument = value;\n    }\n    get credibility(){\n        this.metadata.credibility;\n    }\n    set credibility(value){\n        this.metadata.credibility = value;\n    }\n    get observationDate(){\n        return this.metadata.observationDate;\n    }\n    set observationDate(value){\n        this.metadata.observationDate = value;\n    }\n    get c(){\n        return this.metadata.credibility;\n    }\n    set c(value){\n        this.metadata.credibility = value;\n    }\n    get d(){\n        return this.metadata.observationDate;\n    }\n    set d(value){\n        this.metadata.observationDate = value;\n    }\n\n\n    // ----------------------------------------------------\n    // Records \n    // ----------------------------------------------------\n    \n    getFullRecord(depth=0){\n        \n        if (this.value && this.value?.record_type ){ \n\n            if(['previousItem', 'nextItem'].includes(this.propertyID) ){\n                return this.value.ref\n            } else {\n                return this.value.getFullRecord(depth)  \n            }\n        }\n        return this.value;\n    }\n\n    getRefRecord(depth=0){\n\n        let record = JSON.parse(JSON.stringify(this._record));\n        record.metadata = this.metadata.getRefRecord(depth);\n\n        if (this.value && this.value.record_type){\n            record['value'] = this.value.ref;\n        };\n        return record;        \n    }\n\n    getBestRecord(depth=0){\n\n        let value = this.value;\n        if (this.value && this.value.record_type){\n            value = this.value.getBestRecord(depth);\n        };\n        return value;        \n    }\n\n\n\n    \n\n    // ----------------------------------------------------\n    // Raw records \n    // ----------------------------------------------------\n\n    getSystemRecord(depth=0){\n\n        let record = {}\n        record['@type'] = this.record_type\n        record['@id'] = this.record_id\n        record['actionStatus'] = this._record.actionStatus\n        record['object'] = {}\n        record.object['@type'] = this._record.object['@type']\n        record.object['propertyID'] = this._record.object['propertyID']\n        record.object['value'] =  null\n        \n        record.metadata = this.metadata.getSystemRecord();\n        \n        if (this.value && this.value.constructor.name == 'KrThing' ){\n            record.object['value'] = this.value.getSystemRecord(depth);\n        } else {\n            record.object['value'] = this.value\n        }\n        return record;        \n    }\n\n    setSystemRecord(value){\n\n        this.metadata.setSystemRecord(value.metadata);\n        delete value.metadata;\n        this._record = JSON.parse(JSON.stringify(value));\n        this._record = value;\n    }\n\n    \n    // ----------------------------------------------------\n    // Methods \n    // ----------------------------------------------------\n\n    setValue(value, metadataRecord){\n        this.value = value;\n        this.metadata.inheritMetadata(metadataRecord);\n    }\n\n    equal(other){\n        return this.eq(other);\n    }\n    \n    eq(other){\n        // returns true if equal\n        if (this.value == other.value){\n            return true\n        };\n        return false;\n    }\n    \n    gt(other){\n        return this.metadata.gt(other.metadata);\n    };\n    \n    lt(other){\n        return this.metadata.lt(other.metadata);\n    };\n\n    printScreen(suffix = ''){\n\n        var v = this.value;\n        if (this.value && this.value.record_type) {\n            v = this.value.record_type + \"/\" + this.value.record_id;\n        };\n        var t_string = this.record_type.replace('Action', '').padEnd(10);\n        var c_string = String(this.metadata.c || 0).padStart(5);\n        var p_string = String(this.metadata.position).padStart(5);\n        \n        \n        console.log(suffix, \" - \", c_string, p_string, t_string, v);\n        \n    }\n\n\n    // -----------------------------------------------------\n    //  HTML values \n    // -----------------------------------------------------\n\n\n    get valueHTML(){\n\n        if (this.value.record_type){\n\n            \n        }\n        \n    }\n\n    \n};\n\n","\n\n\nexport class KrMetadata {\n    /* Contains metadata to qualify a value\n\n    attributes:\n    - credibility or c:    \n    - observationDate or d: \n    - record:         Returns all metadata in a dict\n    - object:         The original source of the data\n    - Instrument:     What brought the data over\n    - validFrom\n    - validThrough\n\n\n    Methods\n    - equal:     Returns true if comes from same object\n    - lt:        Worst metadata in order of c and d\n    - gt:        Best metadata in order of c and d\n    - isValid    Returns true if date between validfrom validthrough\n    \n\n    */\n\n    \n    constructor(record) {\n        this._record = {};\n        this.createdDate = new Date();\n        \n    }\n\n    get record(){\n        return this._record;\n    }\n\n    getFullRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    setFullRecord(value){\n        this._record = JSON.parse(JSON.stringify(value));\n    }\n\n    getRefRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    getSystemRecord(depth){\n        return JSON.parse(JSON.stringify(this._record));\n    }\n\n    setSystemRecord(value){\n        this._record = JSON.parse(JSON.stringify(value));\n    }\n\n    inheritMetadata(metadataRecord){\n\n        let currentPosition = this.position;\n        this.record = metadataRecord;\n        this.position = currentPosition;\n        \n    }\n    \n    set record(value){\n        if(!value){return;};\n        this._record = JSON.parse(JSON.stringify(value));\n    }\n    \n    get credibility(){\n        return this._record.credibility;\n    }\n\n    set credibility(value){\n        this._record.credibility = value;\n    }\n    get c(){\n        return this.credibility;\n    }\n\n    set c(value){\n        this.credibility = value;\n    }\n\n    get createdDate(){\n        return new Date(JSON.parse(this._record.createdDate || null));\n    }\n\n    set createdDate(value){\n        if(value && value instanceof Date){\n            this._record.createdDate = JSON.stringify(value);\n        };\n    }\n    get position(){\n        return this._record.position;\n    }\n\n    set position(value){\n        this._record.position = value;\n    }\n    \n    get observationDate(){\n        return new Date(JSON.parse(this._record.observationDate || null));\n    }\n\n    set observationDate(value){\n        if(value && value instanceof Date){\n            this._record.observationDate = JSON.stringify(value);\n        };\n    }\n    get d(){\n        return this.observationDate;\n    }\n\n    set d(value){\n        this.observationDate = value;\n    }\n\n    get validFrom(){\n        return this._record.validFrom;\n    }\n    set validFrom(value){\n        this._record.validFrom = value;\n    }\n\n    get validThrough(){\n        return this._record.validThrough;\n    }\n    set validThrough(value){\n        this._record.validThrough = value;\n    }\n\n    get object(){\n        return this._record.object;\n    }\n    set object(value){\n        this._record.object = value;\n    }\n\n    equal(other){\n        // returns true if data comes from same object\n        if (this.object == other.object){\n            return true\n        };\n        return false;\n    }\n\n\n    isValid(comparisonDate=null){\n        // Returns true if value is within velidFrom, validThrough. Uses today's date if not provided\n        if(comparisonDate==null){\n            comparisonDate = new Date();\n        }\n\n        if (this.validFrom && comparisonDate < this.validFrom)  { return False };\n        if (this.validThrough && comparisonDate >= this.validThrough)  { return False }\n        return True\n    }\n    \n    gt(other, comparisonDate){\n\n        \n        if (!this.credibility && other.credibility) { return false};\n        if (this.credibility && !other.credibility) { return true};\n\n        if ( this.credibility > other.credibility){ return true };\n        if ( this.credibility < other.credibility){ return false };\n\n\n        if (!this.observationDate && other.observationDate) { return false};\n        if (this.observationDate && !other.observationDate) { return true};\n\n        if ( this.observationDate > other.observationDate){ return true };\n        if ( this.observationDate < other.observationDate){ return false };\n\n        if (!this.createdDate && other.createdDate) { return false};\n        if (this.createdDate && !other.createdDate) { return true};\n\n        if ( this.createdDate > other.createdDate){ return true };\n        if ( this.createdDate < other.createdDate){ return false };\n\n        if (!this.position && other.position) { return false};\n        if (this.position && !other.position) { return true};\n\n        if ( this.position > other.position){ return true };\n        if ( this.position < other.position){ return false };\n        \n        return false;\n    };\n\n    lt(other){\n\n        if (!this.credibility && other.credibility) { return true};\n        if (this.credibility && !other.credibility) { return false};\n        \n        if ( this.credibility < other.credibility){ return true };\n        if ( this.credibility > other.credibility){ return false };\n\n        \n        if (!this.observationDate && other.observationDate) { return true};\n        if (this.observationDate && !other.observationDate) { return false};\n\n        if ( this.observationDate < other.observationDate){ return true };\n        if ( this.observationDate > other.observationDate){ return false };\n        \n\n        if (!this.createdDate && other.createdDate) { return true};\n        if (this.createdDate && !other.createdDate) { return false};\n\n        if ( this.createdDate < other.createdDate){ return true };\n        if ( this.createdDate > other.createdDate){ return false };\n\n        if (!this.position && other.position) { return true};\n        if (this.position && !other.position) { return false};\n\n        if ( this.position < other.position){ return true };\n        if ( this.position > other.position){ return false };\n        \n        return false;\n    };\n\n    \n}"],"names":[],"version":3,"file":"main.js.map"}